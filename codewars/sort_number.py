"""
Описание:
Вам дана числовая последовательность (массив), содержащая 
некоторое положительное целое число и ноль.

[3,2,1,0,5,6,4,0,1,5,3,0,4,2,8,0]
Его можно разделить на некоторую подпоследовательность с 
нулевым завершением, например [3,2,1,0], [5,6,4,0] ...

Ваша задача: во-первых, отсортировать каждую подпоследовательность 
в порядке возрастания (не сортируйте ноль, он всегда в конце); 
Во-вторых, отсортируйте все подпоследовательности в соответствии 
с их суммарным значением (также в порядке возрастания).

Аргументы:
sequence: Числовая последовательность.
Результаты и примечание:
В результате получается отсортированная числовая последовательность.
Если некоторые подпоследовательности имеют одинаковое значение суммы, отсортируйте их в соответствии с их исходным порядком.
ex:
sortSequence([3,2,1,0,5,6,4,0,1,5,3,0,4,2,8,0]) should return
[1,2,3,0,1,3,5,0,2,4,8,0,4,5,6,0]

sortSequence([3,2,1,0,5,6,4,0,1,5,3,0,2,2,2,0]) should return
[1,2,3,0,2,2,2,0,1,3,5,0,4,5,6,0]

sortSequence([2,2,2,0,5,6,4,0,1,5,3,0,3,2,1,0]) should return
[2,2,2,0,1,2,3,0,1,3,5,0,4,5,6,0]
"""
# сортировка словаря по ключам
# d = {'a': 10, 'c': 15, 'b': 4}
# list_keys = list(d.keys())
# list_keys.sort()
# for i in list_keys:
#     print(i, ':', d[i])


def main():
    print(sort_sequence([3,2,1,0,5,6,4,0,1,5,3,0,4,2,8,0]))

#решение, если сумма подсписков не повторяется
def sort_sequence(sequence):
    #формирование подсписков
    ln = [[],[],[],[]]
    j = 0
    for i in range(len(sequence)):
        
        if sequence[i]!=0:
            ln[j].append(sequence[i])
        
        else:
            ln[j].sort()
            j+=1

    #поиск суммы каждого подсписка
    lb = [sum(ln[i]) for i in range(4)]

    #сортировка по ключам
    lk = dict(zip(lb, ln))
    lm = [lk[i] for i in sorted(lk.keys())]


    #из подсписков в один список
    lv = [lm[i][j] for i in range(len(lm)) for j in range(len(lm[i]))]


    #добавление нуля как разделителя
    position = 3
    for i in range(4):
        lv.insert(position, 0)
        position+=4

    return lv
        

main()